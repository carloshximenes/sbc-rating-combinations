{"version":3,"sources":["assets/generateRangeOVR/generateRangeOVR.js","assets/createURL/createURL.js","components/TargetSquadOVR/TargetSquadOVR.js","components/AvailablesOVR/AvailablesOVR.js","components/RangeOVR/RangeOVR.js","components/ResultTable/ResultTable.js","components/Header/Header.js","containers/App.js","serviceWorker.js","index.js"],"names":["generateRangeOVR","min","max","arraySize","Array","from","length","v","k","Number","createURL","size","ovr","args","fixed","urlFinal","i","inputStyles","marginBottom","TargetSquadOVR","props","Card","Header","Body","Form","Row","Label","Control","type","pattern","value","style","onChange","onchange","required","AvailablesOVR","map","elem","index","key","className","data-index","RangeOVR","Col","interval","step","name","ResultTable","table","maxWidth","maxHeight","overflowY","overflowX","fontSize","textAlign","Table","bordered","hover","header","Object","keys","Navbar","bg","variant","Brand","alt","src","width","height","styles","marginTop","App","useState","targetOVR","setTargetOVR","targetList","setTargetList","occurrencesList","setOccurrencesList","arrayList","setArrayList","currentList","setCurrentList","intervalOVR","setIntervalOVR","isLoading","setIsLoading","validated","setValidated","useEffect","myCurrentList","filter","e","a","axios","result","data","fetchData","fixedOccurrencesList","reduce","counter","item","p","String","Container","onSubmit","event","currentTarget","checkValidity","stopPropagation","preventDefault","target","auxList","splice","dataset","Button","block","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1975048.chunk.js","sourcesContent":["const generateRangeOVR = (min, max) => {\r\n    const arraySize = max - min + 1;\r\n    return Array.from({ length: arraySize }, (v, k) => Number(min) + k);\r\n}\r\n\r\nexport default generateRangeOVR;","const urlPrefix = 'https://ancient-journey-38675.herokuapp.com/combinacoes3?';\r\nconst urlList = 'lista=';\r\nconst urlSize = 'tamanho=';\r\nconst urlFixedList = 'fixo=';\r\nconst urlOVR = 'ovr=';\r\n\r\nconst createURL = ([...args], size, [...fixed], ovr) => {\r\n    let urlFinal = urlPrefix;\r\n    for(let i = 0; i < args.length; i++) {\r\n        urlFinal = urlFinal + urlList + args[i] + '&';\r\n    }\r\n    urlFinal = urlFinal + urlSize + size + '&';\r\n    for(let i = 0; i < fixed.length; i++) {\r\n        urlFinal = urlFinal + urlFixedList + fixed[i] + '&';\r\n    }\r\n    urlFinal = urlFinal + urlOVR + ovr;\r\n\r\n    return urlFinal;\r\n}\r\n\r\nexport default createURL;","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nconst inputStyles = { marginBottom: '10px' };\r\n\r\nexport default function TargetSquadOVR(props) {\r\n    return (<>\r\n        <Card>\r\n            <Card.Header>STEP 1 (required)</Card.Header>\r\n            <Card.Body>\r\n                <Form.Row>\r\n                    <Form.Label>Enter the target squad rating</Form.Label>\r\n                    <Form.Control type=\"text\" pattern=\"[0-9]*\" value={props.value} style={inputStyles} min='60' max='99' onChange={props.onchange} required/>\r\n                </Form.Row>\r\n            </Card.Body>\r\n        </Card>\r\n    </>);\r\n}","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nconst inputStyles = { marginBottom: '10px' };\r\n\r\nexport default function AvailablesOVR(props) {\r\n    return (<>\r\n        <Card>\r\n            <Card.Header>STEP 3 (optional)</Card.Header>\r\n            <Card.Body>\r\n                <Form.Label>Enter the ratings of the cards which you want to use for this sbc (maximum 10)</Form.Label>\r\n                <Form.Row>\r\n                    {props.fixed.map((elem, index) =>\r\n                        <div key={index} className={(index === 0 || index === 5) ? 'col-2 offset-1' : 'col-2'}>\r\n                            <Form.Control type='text' pattern=\"[0-9]*\" data-index={index} value={elem} style={inputStyles} min='60' max='99' onChange={props.onchange}/>\r\n                        </div>\r\n                    )}\r\n                </Form.Row>\r\n            </Card.Body>\r\n        </Card>\r\n    </>);\r\n}","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst inputStyles = { marginBottom: '10px' };\r\n\r\nexport default function RangeOVR(props) {\r\n    return (<>\r\n        <Card>\r\n            <Card.Header>STEP 2 (required)</Card.Header>\r\n            <Card.Body>\r\n                <Form.Label>Player ratings to try (Min/Max)</Form.Label>\r\n                <Form.Row>\r\n                    <Col><Form.Control type=\"text\" pattern=\"[0-9]*\" value={props.interval.min} style={inputStyles} min='60' max='99' step='1' name='min' onChange={props.onchange} required /></Col>\r\n                    <Col><Form.Control type=\"text\" pattern=\"[0-9]*\" value={props.interval.max} style={inputStyles} min={props.interval.min} max='99' name='max' step='1' onChange={props.onchange} required /></Col>\r\n                </Form.Row>\r\n            </Card.Body>\r\n        </Card>\r\n    </>);\r\n}","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nexport default function ResultTable(props) {\r\n    return (\r\n        <Card>\r\n            <Card.Header>RESULT - {props.table.length} combinations for remaining {11 - props.fixed.length} cards</Card.Header>\r\n            <Card.Body style={{ maxWidth: 'full', maxHeight: '900px', overflowY: 'auto', overflowX: 'auto', fontSize: '14px', textAlign: 'center' }}>\r\n                <Table bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                            {\r\n                                props.header.map((elem, index) => <th key={index}>{elem}</th>)\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            props.table.map((elem, index) => <tr key={index}>{Object.keys(elem).map((value, index) => <td key={index}>{elem[value]}</td>)}</tr>)\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}","import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n\r\nexport default function Header() {\r\n    return (<>\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand>\r\n                <img\r\n                    alt=\"\"\r\n                    src=\"/images/logo192.png\"\r\n                    width=\"30\"\r\n                    height=\"30\"\r\n                    className=\"d-inline-block align-top\"\r\n                />\r\n                {' SBC Rating Combinations Calculator'}\r\n            </Navbar.Brand>\r\n        </Navbar>\r\n    </>);\r\n}","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport './App.css';\n\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nimport generateRangeOVR from '../assets/generateRangeOVR/generateRangeOVR';\nimport createURL from '../assets/createURL/createURL';\n\nimport TargetSquadOVR from '../components/TargetSquadOVR/TargetSquadOVR';\nimport AvailablesOVR from '../components/AvailablesOVR/AvailablesOVR';\nimport RangeOVR from '../components/RangeOVR/RangeOVR';\nimport ResultTable from '../components/ResultTable/ResultTable';\nimport Header from '../components/Header/Header';\n\nconst styles = {\n  marginTop: '10px',\n  marginBottom: '10px'\n}\n\nfunction App() {\n  const [targetOVR, setTargetOVR] = useState(83);\n\n  // const [list, setList] = useState([]);\n  const [targetList, setTargetList] = useState([]);\n  const [occurrencesList, setOccurrencesList] = useState([]);\n  const [arrayList, setArrayList] = useState([]);\n  const [currentList, setCurrentList] = useState(['', '', '', '', '', '', '', '', '', '']);\n  const [intervalOVR, setIntervalOVR] = useState({ min: 78, max: 86 });\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [validated, setValidated] = useState(false);\n\n  const handleSubmit = event => {\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      setValidated(false);\n      setIsLoading(false);\n    } else {\n      setValidated(true);\n      setIsLoading(true);\n\n      setArrayList(generateRangeOVR(intervalOVR.min, intervalOVR.max));\n    }\n    event.stopPropagation();\n    event.preventDefault();\n  };\n\n  const reset = () => {\n    setTargetOVR(83);\n    setTargetList([]);\n    setOccurrencesList([]);\n    setArrayList([]);\n    setCurrentList(['', '', '', '', '', '', '', '', '', '']);\n    setIntervalOVR({ min: 78, max: 86 });\n    setValidated(false);\n    setIsLoading(false);\n  }\n\n  // Atualiza a lista com os OVRs possíveis\n  useEffect(() => {\n    if (isLoading && validated) {\n\n      const myCurrentList = currentList.filter(e => e !== '');\n      // Será realizado o cálculo considerando somente o tamanho do array 'dinâmico', ou seja, desconsiderando o que houver na variável currentList.      \n      const arraySize = 11 - myCurrentList.length;\n\n      const fetchData = async () => {\n        const result = await axios(createURL(arrayList, arraySize, myCurrentList, targetOVR));\n        // setList(result.data);\n        setTargetList(result.data);\n        setIsLoading(!isLoading);\n      };\n      fetchData();\n    }\n    // eslint-disable-next-line\n  }, [isLoading, validated]);\n\n  // Conta a quantidade de ocorrências de cada valor nos arrays\n  useEffect(() => {\n    const newOccurrencesList = targetList.map(elem => {\n      return elem.reduce((counter, item) => {\n        const p = String(item);\n        counter[p] = (counter[p] || 0) + 1;\n        return counter;\n      }, {})\n    });\n\n\n    // Completa o array agora com os valores zerados\n    const fixedOccurrencesList = newOccurrencesList.map(elem => {\n      return arrayList.reduce((counter, item) => {\n        const p = String(item);\n        counter[p] = (elem[p] || 0);\n        return counter;\n      }, {})\n    });\n\n    setOccurrencesList(fixedOccurrencesList);\n    // eslint-disable-next-line\n  }, [targetList]);\n\n  return (<>\n    <Header/>\n    <Container>\n      <Form validated={validated} onSubmit={handleSubmit}>\n        <Form.Row style={styles}>\n          <Col><TargetSquadOVR value={targetOVR} onchange={(e) => setTargetOVR(Number(e.target.value))} /></Col>\n          <Col><RangeOVR interval={intervalOVR} onchange={(e) => setIntervalOVR({ ...intervalOVR, [e.target.name]: Number(e.target.value) })} /></Col>\n        </Form.Row>\n        <AvailablesOVR fixed={currentList} onchange={(e) => {\n          const auxList = [...currentList];\n          auxList.splice(e.target.dataset.index, 1, (e.target.value === '') ? '' : Number(e.target.value));\n          setCurrentList(auxList);\n        }} />\n        <Form.Row style={styles}>\n          <div className='col-3'><Button block variant='secondary' onClick={reset}>Reset</Button></div>\n          <Col><Button type='submit' block variant={(isLoading) ? 'primary' : 'success'}>{(isLoading) ? 'Loading...' : 'Calculate'}</Button></Col>\n        </Form.Row>\n        <ResultTable header={arrayList} table={occurrencesList} fixed={currentList.filter(e => e !== '')} />\n      </Form>\n    </Container>\n  </>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}